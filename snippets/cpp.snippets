#--------------------------Looping--------------------------
snippet forn
	for(int ${1:i} = 0; $1 < (int)${2:n}; ++$1) {
		${3:/* Code */}
	}
snippet forab
	for(int ${1:i} = (int)${2:a}; $1 <= (int)${3:b}; ++$1) {
		${4:/* Code */}
	}
snippet rep
	for(int ${1:i} = (int)${2:a}; $1 >= (int)${3:b}; --$1) {
		${4:/* Code */}
	}
snippet for
	for(auto &${1:c}: ${2:v}) {
		${3: /* Code */}
	}
# Do While Loop
snippet do
	do{
		${2:/* code */}
	}while(${1:/* condition */});
# While Loop
snippet while
	while(${1:/* condition */}) {
		${2:/* code */}
	}

#--------------------------Abbreviations--------------------------
snippet int64
	long long ${1:n};
snippet ll
	long long ${1:n};
snippet cl
	memset(${1:a}, ${2:-1}, sizeof($1));
	${3}
snippet Sf
	scanf("${1}");
	${2}
snippet Pf
	printf("${1}");
	${2}
snippet read
	scanf("%d", &${1:n});
	${2}
snippet write
	printf("%d ", ${1:n});
	${2}
snippet writeln
	printf("%d\n", ${1:n});
	${2}
snippet endl
	"\n";
	${1}

snippet debug
	#ifdef DEBUG
	    printf("${1}\n");
	#endif
	${2}

#--------------------------Constructors--------------------------
snippet vi
	vector <int> ${1:v};
	${2}
snippet map
	map<${1:int}, ${2:int}> ${3:m};
	${4}
snippet vector
	vector<${1:char}> ${2:v};
	${3}
snippet set
	set <${1:int}> ${2:s};
	${3}
snippet ss
	stringstream ${1};
	${2}
snippet st
	string ${1:s};
	${2}
snippet vvi
	vector<vector<int>> ${1:matrix};
	${2}
snippet ii
	pair<${1:int}, ${2:int}> ${3}
	${4}
snippet vs
	vector<string> ${1:vs};
	${2}

#--------------------------ShortHands--------------------------
snippet all
	begin(${1:c}), end($1)${2}
snippet mp
	make_pair(${1:a}, ${2:b})${3}
snippet pb
	push_back(${1:n});
	${2}
snippet eb
	emplace_back(${1:n});
	${2}
snippet sz
	size()${1}
snippet class
	class ${1:/*ClassName*/} {
	public:
		${2:/*body*/}
	};
snippet X
	first${1}
snippet Y
	second${1}
snippet sort
	sort(${1:v}.begin(), $1.end());
	${2}
snippet reverse
	reverse(${1:v}.begin(), $1.end());
	${2}
snippet fill
	fill(${1:v}.begin(), $1.end(), ${2:0});
	${3}
snippet max_element
	max_element(${1:v}.begin(), $1.end());
	${2}
snippet min_element
	min_element(${1:v}.begin(), $1.end());
	${2}

#-----------------------Branching--------------------
snippet if
	if(${1:/* condition */}) {
		${2:/* code */}
	}
snippet else
	else {
		${1:/* code */}
	}
